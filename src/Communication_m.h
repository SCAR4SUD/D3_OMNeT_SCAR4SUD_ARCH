//
// Generated file, do not edit! Created by opp_msgtool 6.1 from src/Communication.msg.
//

#ifndef __COMMUNICATION_M_H
#define __COMMUNICATION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class KeyRequest;
class KeyResponse;
/**
 * Class generated from <tt>src/Communication.msg:20</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message KeyRequest
 * {
 *     int src;  // ID della ECU mittente originale
 *     int dest; // ID della ECU destinataria originale
 * }
 * </pre>
 */
class KeyRequest : public ::omnetpp::cMessage
{
  protected:
    int src = 0;
    int dest = 0;

  private:
    void copy(const KeyRequest& other);

  protected:
    bool operator==(const KeyRequest&) = delete;

  public:
    KeyRequest(const char *name=nullptr, short kind=0);
    KeyRequest(const KeyRequest& other);
    virtual ~KeyRequest();
    KeyRequest& operator=(const KeyRequest& other);
    virtual KeyRequest *dup() const override {return new KeyRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrc() const;
    virtual void setSrc(int src);

    virtual int getDest() const;
    virtual void setDest(int dest);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeyRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeyRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/Communication.msg:26</tt> by opp_msgtool.
 * <pre>
 * message KeyResponse
 * {
 *     int src;      // ID della ECU mittente originale
 *     int dest;     // ID della ECU destinataria originale
 *     string key;   // chiave di sessione generata dallâ€™HSM
 * }
 * </pre>
 */
class KeyResponse : public ::omnetpp::cMessage
{
  protected:
    int src = 0;
    int dest = 0;
    omnetpp::opp_string key;

  private:
    void copy(const KeyResponse& other);

  protected:
    bool operator==(const KeyResponse&) = delete;

  public:
    KeyResponse(const char *name=nullptr, short kind=0);
    KeyResponse(const KeyResponse& other);
    virtual ~KeyResponse();
    KeyResponse& operator=(const KeyResponse& other);
    virtual KeyResponse *dup() const override {return new KeyResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrc() const;
    virtual void setSrc(int src);

    virtual int getDest() const;
    virtual void setDest(int dest);

    virtual const char * getKey() const;
    virtual void setKey(const char * key);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeyResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeyResponse& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline KeyRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<KeyRequest*>(ptr.get<cObject>()); }
template<> inline KeyResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<KeyResponse*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __COMMUNICATION_M_H

